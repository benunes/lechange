generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  USER
  ADMIN
  MODERATOR
  SUSPENDED
}

enum ReportType {
  INAPPROPRIATE_CONTENT
  SPAM
  HARASSMENT
  FAKE_LISTING
  SCAM
  COPYRIGHT
  OTHER
}

enum ReportStatus {
  PENDING
  REVIEWED
  RESOLVED
  DISMISSED
}

// Models required by Better Auth
model User {
  id            String   @id
  name          String?
  email         String?  @unique
  emailVerified Boolean  @default(false)
  image         String?
  role          UserRole @default(USER)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations for Better Auth
  accounts Account[]
  sessions Session[]

  // Relations for our application
  listings          Listing[]
  favorites         Favorite[]
  conversations     ConversationParticipant[]
  messages          Message[]
  questions         Question[]
  answers           Answer[]
  answerVotes       AnswerVote[]
  notifications     Notification[]
  questionFollows   QuestionFollow[]
  tagFollows        TagFollow[]
  reports           Report[]
  adminLogs         AdminLog[]                @relation("AdminLogs")
  forumCategories   Category[]                @relation("ForumCategoryCreator")
  listingCategories ListingCategory[]         @relation("ListingCategoryCreator")
  appSettings       AppSettings[]             @relation("AppSettingsUpdatedBy")

  @@map("user")
}

model Account {
  id                    String    @id
  accountId             String?
  userId                String
  providerId            String
  provider              String?
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  password              String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerId])
  @@map("account")
}

model Session {
  id        String   @id
  userId    String
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  ipAddress String?
  userAgent String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("session")
}

model Verification {
  id         String   @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@map("verification")
}

// Application-specific models

// Modèle pour les catégories d'annonces
model ListingCategory {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  icon        String // Nom de l'icône Lucide React
  color       String // Couleur hexadécimale
  slug        String   @unique
  isActive    Boolean  @default(true)
  parentId    String? // Pour les sous-catégories
  order       Int      @default(0) // Ordre d'affichage
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdBy   User     @relation("ListingCategoryCreator", fields: [createdById], references: [id])
  createdById String

  // Relations
  parent        ListingCategory?  @relation("CategoryHierarchy", fields: [parentId], references: [id])
  subcategories ListingCategory[] @relation("CategoryHierarchy")
  listings      Listing[]
}

// Modèle pour les catégories du forum (existant)
model Category {
  id          String     @id @default(cuid())
  name        String     @unique
  description String?
  icon        String // Nom de l'icône Lucide React
  color       String // Couleur hexadécimale
  slug        String     @unique
  isActive    Boolean    @default(true)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  createdBy   User       @relation("ForumCategoryCreator", fields: [createdById], references: [id])
  createdById String
  questions   Question[]
}

model Listing {
  id          String   @id @default(cuid())
  title       String
  description String
  price       Float?
  categoryId  String // Changé de category String vers categoryId String
  condition   String? // Neuf, Très bon état, Bon état, État correct
  location    String? // Localisation optionnelle
  images      String[]
  createdById String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  createdBy    User            @relation(fields: [createdById], references: [id])
  category     ListingCategory @relation(fields: [categoryId], references: [id])
  favorites    Favorite[]
  conversation Conversation[]
  reports      Report[]
}

model Favorite {
  userId    String
  listingId String
  createdAt DateTime @default(now())

  user    User    @relation(fields: [userId], references: [id])
  listing Listing @relation(fields: [listingId], references: [id])

  @@id([userId, listingId])
}

model Conversation {
  id           String                    @id @default(cuid())
  listingId    String?
  createdAt    DateTime                  @default(now())
  updatedAt    DateTime                  @updatedAt
  participants ConversationParticipant[]
  messages     Message[]
  listing      Listing?                  @relation(fields: [listingId], references: [id])
}

model ConversationParticipant {
  id             String       @id @default(cuid())
  userId         String
  conversationId String
  user           User         @relation(fields: [userId], references: [id])
  conversation   Conversation @relation(fields: [conversationId], references: [id])

  @@unique([userId, conversationId])
}

model Message {
  id             String   @id @default(cuid())
  content        String
  senderId       String
  conversationId String
  createdAt      DateTime @default(now())

  sender       User         @relation(fields: [senderId], references: [id])
  conversation Conversation @relation(fields: [conversationId], references: [id])
}

model Question {
  id           String           @id @default(cuid())
  title        String
  content      String?
  tags         String[]
  images       String[] // URLs des images uploadées
  categoryId   String? // Nouvelle relation vers Category
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt
  author       User             @relation(fields: [authorId], references: [id])
  authorId     String
  category     Category?        @relation(fields: [categoryId], references: [id])
  answers      Answer[]         @relation("AnswersOnQuestion")
  bestAnswerId String?          @unique
  bestAnswer   Answer?          @relation("BestAnswer", fields: [bestAnswerId], references: [id])
  followers    QuestionFollow[]
  reports      Report[]
}

model Answer {
  id         String   @id @default(cuid())
  content    String
  questionId String
  authorId   String
  parentId   String? // Pour les réponses imbriquées
  upvotes    Int      @default(0)
  downvotes  Int      @default(0)
  images     String[] // URLs des images uploadées
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  question        Question     @relation("AnswersOnQuestion", fields: [questionId], references: [id])
  author          User         @relation(fields: [authorId], references: [id])
  votes           AnswerVote[]
  bestForQuestion Question?    @relation("BestAnswer")

  // Relations pour les réponses imbriquées
  parent  Answer?  @relation("AnswerReplies", fields: [parentId], references: [id])
  replies Answer[] @relation("AnswerReplies")
  reports Report[]
}

model AnswerVote {
  id        String   @id @default(cuid())
  userId    String
  answerId  String
  isUpvote  Boolean // true pour upvote, false pour downvote
  createdAt DateTime @default(now())

  user   User   @relation(fields: [userId], references: [id])
  answer Answer @relation(fields: [answerId], references: [id])

  @@unique([userId, answerId])
}

model Notification {
  id        String           @id @default(cuid())
  userId    String
  type      NotificationType
  title     String
  message   String
  read      Boolean          @default(false)
  data      Json? // Données supplémentaires (questionId, answerId, etc.)
  createdAt DateTime         @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum NotificationType {
  NEW_ANSWER // Nouvelle réponse à ta question
  BEST_ANSWER // Ta réponse a été marquée comme meilleure
  QUESTION_FOLLOWED // Nouvelle réponse à une question suivie
  MENTION // Tu as été mentionné
  UPVOTE // Ta réponse a reçu un upvote
}

model QuestionFollow {
  id         String   @id @default(cuid())
  userId     String
  questionId String
  createdAt  DateTime @default(now())

  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  question Question @relation(fields: [questionId], references: [id], onDelete: Cascade)

  @@unique([userId, questionId])
}

model TagFollow {
  id        String   @id @default(cuid())
  userId    String
  tag       String
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, tag])
}

model Report {
  id         String       @id @default(cuid())
  type       ReportType
  status     ReportStatus @default(PENDING)
  details    String?
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  reportedBy String
  listingId  String?
  questionId String?
  answerId   String?

  user     User      @relation(fields: [reportedBy], references: [id], onDelete: Cascade)
  listing  Listing?  @relation(fields: [listingId], references: [id], onDelete: Cascade)
  question Question? @relation(fields: [questionId], references: [id], onDelete: Cascade)
  answer   Answer?   @relation(fields: [answerId], references: [id], onDelete: Cascade)

  @@index([listingId])
  @@index([questionId])
  @@index([answerId])
}

model AdminLog {
  id         String   @id @default(cuid())
  adminId    String
  action     String // DELETE_CONTENT, BAN_USER, CHANGE_ROLE, etc.
  details    String?
  targetType String? // USER, LISTING, QUESTION, ANSWER
  targetId   String?
  createdAt  DateTime @default(now())

  admin User @relation("AdminLogs", fields: [adminId], references: [id], onDelete: Cascade)

  @@index([adminId])
  @@index([createdAt])
}

model AppSettings {
  id        String   @id @default("default")
  data      String // JSON string containing all settings
  updatedBy String
  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())

  updatedByUser User @relation("AppSettingsUpdatedBy", fields: [updatedBy], references: [id])
}
