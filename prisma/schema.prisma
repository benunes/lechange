generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  USER
  ADMIN
}

// Models required by Better Auth
model User {
  id            String   @id
  name          String?
  email         String?  @unique
  emailVerified Boolean  @default(false)
  image         String?
  role          UserRole @default(USER)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations for Better Auth
  accounts Account[]
  sessions Session[]

  // Relations for our application
  listings      Listing[]
  favorites     Favorite[]
  conversations ConversationParticipant[]
  messages      Message[]
  questions     Question[]
  answers       Answer[]

  @@map("user")
}

model Account {
  id                    String    @id
  accountId             String?
  userId                String
  providerId            String
  provider              String?
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  password              String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerId])
  @@map("account")
}

model Session {
  id        String   @id
  userId    String
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  ipAddress String?
  userAgent String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("session")
}

model Verification {
  id         String   @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@map("verification")
}

// Application-specific models
model Listing {
  id          String   @id @default(cuid())
  title       String
  description String
  price       Float?
  category    String
  images      String[]
  createdById String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  createdBy    User           @relation(fields: [createdById], references: [id])
  favorites    Favorite[]
  conversation Conversation[]
}

model Favorite {
  userId    String
  listingId String
  createdAt DateTime @default(now())

  user    User    @relation(fields: [userId], references: [id])
  listing Listing @relation(fields: [listingId], references: [id])

  @@id([userId, listingId])
}

model Conversation {
  id           String                    @id @default(cuid())
  listingId    String?
  createdAt    DateTime                  @default(now())
  updatedAt    DateTime                  @updatedAt
  participants ConversationParticipant[]
  messages     Message[]
  listing      Listing?                  @relation(fields: [listingId], references: [id])
}

model ConversationParticipant {
  id             String       @id @default(cuid())
  userId         String
  conversationId String
  user           User         @relation(fields: [userId], references: [id])
  conversation   Conversation @relation(fields: [conversationId], references: [id])

  @@unique([userId, conversationId])
}

model Message {
  id             String   @id @default(cuid())
  content        String
  senderId       String
  conversationId String
  createdAt      DateTime @default(now())

  sender       User         @relation(fields: [senderId], references: [id])
  conversation Conversation @relation(fields: [conversationId], references: [id])
}

model Question {
  id        String   @id @default(cuid())
  title     String
  content   String
  tags      String[]
  authorId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  author  User     @relation(fields: [authorId], references: [id])
  answers Answer[]
}

model Answer {
  id         String   @id @default(cuid())
  content    String
  questionId String
  authorId   String
  upvotes    Int      @default(0)
  downvotes  Int      @default(0)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  question Question @relation(fields: [questionId], references: [id])
  author   User     @relation(fields: [authorId], references: [id])
}
